<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.关联数据库的配置文件jdbc.properties
    -->
    <properties resource="jdbc.properties"></properties>

    <!--
        配置开关
    -->
    <settings>
        <!--
            开启驼峰式命名规则:可以把数据库的字段名转换为javabean中成员变量名称
            user_name  userName
        -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--
        类型别名（typeAliases）:可以给javabean全类名起一个别名
    -->
    <typeAliases>
        <!--
            1.给每一个javabean的全类名,起一个别名:在使用javabean全类名的时候,就可以使用别名代替
        -->
        <!--<typeAlias type="com.itheima.User" alias="User"></typeAlias>
        <typeAlias type="com.itheima.pojo.Order" alias="Order"></typeAlias>-->

        <!--
            2.给javabean包中所有的类起别名
            package name="com.itheima.pojo"包的路径,会为包中每一个类的全类名都起一个别名,别名的名称就是类名
                com.itheima.User User
                com.itheima.pojo.Order Order
            注意:别名的使用不区分大小写
        -->
        <package name="com.itheima.pojo"/>
    </typeAliases>

    <!--
        environments:环境配置,从数据库的配置文件中,读取数据库连接的相关信息
        2.获取数据库的配置文件中的数据库连接的信息
    -->
    <environments default="development">
        <!--
            development:配置的开发库
        -->
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <!--
            配置测试库: test
        -->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${test.driver}"/>
                <property name="url" value="${test.url}"/>
                <property name="username" value="${test.username}"/>
                <property name="password" value="${test.password}"/>
            </dataSource>
        </environment>

        <!--
            配置生产库: product 非常重要,用户实际使用的数据库
        -->
        <environment id="product">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${product.driver}"/>
                <property name="url" value="${product.url}"/>
                <property name="username" value="${product.username}"/>
                <property name="password" value="${product.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
        3.关联书写sql语句的xml配置文件
    -->
    <mappers>
        <!--
            方式一:直接引入Mapper配置文件
        -->
        <!--<mapper resource="mapper/UserMapper.xml"/>-->
        <!--<mapper resource="mapper/OrderMapper.xml"/>-->

        <!--
            方式二: 通过类(接口)的全路径来指定:根据接口的全路径来找到UserMapper.xml
            class="com.itheima.mapper.UserMapper" class的属性值是接口的全类名
            要求:
                1.UserMapper.xml配置文件包路径必须和接口的包路径一致
                2.UserMapper.xml配置文件的名称必须和接口的名称一致
        -->
        <!--<mapper class="com.itheima.mapper.UserMapper"/>-->

        <!--
            方式三: 配置扫描包
                name="com.itheima.mapper" 接口的包名
                会扫描包下所有的接口,在根据接口的名称找到Mapper.xml文件
            要求:
                1.UserMapper.xml配置文件包路径必须和接口的包路径一致
                2.UserMapper.xml配置文件的名称必须和接口的名称一致
        -->
        <package name="com.itheima.mapper"/>
    </mappers>
</configuration>