<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:mapper文件的命名空间,唯一,用于区分mapper的xml文件
    Mybatis使用DAO代理开发方式:Mybaits会根据接口自动的创建接口的实现类对象
        1.namespace必须修改为接口的全类名:com.itheima.mapper.OrderMapper
        2.所有sql语句id值,必须修改为接口中对应方法的名称
-->
<mapper namespace="com.itheima.mapper.OrderMapper">
	<!--结果映射-->
    <resultMap id="orderAndUserByNumResultMap" type="Order" autoMapping="true">
        <!--映射order表的id-->
        <id property="oid" column="oid"/>
        <!--关联用户user对象-->
        <association property="user" javaType="User" autoMapping="true">
            <!--映射user表的id-->
            <id property="id" column="id"/>
        </association>
    </resultMap>

    <!--
        需求1：根据订单号 查询订单的同时，查询出订单所属用户
    -->
    <select id="selectOrderAndUserByNum" resultMap="orderAndUserByNumResultMap">
        SELECT * FROM tb_order o
        LEFT OUTER JOIN tb_user u ON o.user_id = u.id
        WHERE order_number = #{num}
    </select>

    <resultMap id="orderAndUserAndOrderitemByNumResultMap" type="Order" autoMapping="true" extends="orderAndUserByNumResultMap">
        <!--映射order表的id-->
        <!--关联用户user对象-->
        <!--映射user表的id-->
        <!--关联订单详情的list集合-->
        <collection property="orderitemList" javaType="list" ofType="Orderitem" autoMapping="true">
            <!--映射Orderitem表的id-->
            <id property="itemId" column="item_id"/>
        </collection>
    </resultMap>

    <!--
        需求2：根据订单号 查询订单，并且查询出所有订单详情及所属用户
    -->
    <select id="selectOrderAndUserAndOrderitemByNum" resultMap="orderAndUserAndOrderitemByNumResultMap">
        SELECT * FROM tb_order o
        LEFT OUTER JOIN tb_user u ON o.user_id = u.id
        LEFT OUTER JOIN tb_orderitem oi ON oi.order_id = o.oid
        WHERE order_number = #{num}
    </select>

    <resultMap id="orderAndUserAndOrderitemAndProductByNumResultMap" type="Order" autoMapping="true">
        <!--1.映射order表的主键-->
        <id property="oid" column="oid"/>
        <!--2.关联Order中user对象-->
        <association property="user" javaType="User" autoMapping="true">
            <!--2.1映射user表的主键-->
            <id property="id" column="id"/>
        </association>

        <!--
            3.关联Order中Orderitem的list集合
            javaType:属性的java类型
            ofType:集合中元素的类型
        -->
        <collection property="orderitemList" javaType="list" ofType="Orderitem" autoMapping="true">
            <!--3.1映射Orderitem表主键-->
            <id property="itemId" column="item_id"/>
            <!--3.2关联Orderitem中的Product对象-->
            <association property="product" javaType="Product" autoMapping="true">
                <!--3.2.1映射product表的主键-->
                <id property="pid" column="pid"/>
            </association>
        </collection>
    </resultMap>

    <!--
        需求3：根据订单号 查询订单，查询出所属用户，并且查询出订单的详情，及订单详情中的对应的商品信息
    -->
    <select id="selectOrderAndUserAndOrderitemAndProductByNum" resultMap="orderAndUserAndOrderitemAndProductByNumResultMap">
        SELECT * FROM tb_order o
        LEFT OUTER JOIN tb_user u ON o.user_id = u.id
        LEFT OUTER JOIN tb_orderitem oi ON oi.order_id = o.oid
        LEFT OUTER JOIN tb_product p ON p.pid = oi.product_id
        WHERE order_number = #{num}
    </select>
</mapper>